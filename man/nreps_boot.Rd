% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nreps_boot.R
\name{nreps_boot}
\alias{nreps_boot}
\title{Determine sample sizes for a pair of algorithms on a problem instance}
\usage{
nreps_boot(instance, algorithm1, algorithm2, se.max, dif, nstart = 20,
  nmax = 1000, seed = NULL, boot.R = 999, ncpus = 1)
}
\arguments{
\item{instance}{a list object containing the definitions of the problem
instance.
See Section \emph{Problems and Algorithms} for details.}

\item{algorithm1}{a list object containing the definitions of algorithm 1.
See Section \emph{Problems and Algorithms} for details.}

\item{algorithm2}{a list object containing the definitions of algorithm 2.
See Section \emph{Problems and Algorithms} for details.}

\item{se.max}{desired upper limit for the standard error of the estimated
difference between the two algorithms. See Section
\emph{Types of Differences} for details.}

\item{dif}{name of the difference for which the SE is desired. Accepts "perc"
(for percent differences) or "simple" (for simple differences)}

\item{nstart}{initial number of algorithm runs for each algorithm.
See Section \emph{Initial Number of Observations} for details.}

\item{nmax}{maximum total allowed sample size.}

\item{seed}{seed for the random number generator}

\item{boot.R}{number of bootstrap resamples}

\item{ncpus}{number of cores to use}
}
\value{
a list object containing the following items:
\itemize{
\item \code{x1j} - vector of observed performance values for \code{algorithm1}
\item \code{x2j} - vector of observed performance values for \code{algorithm2}
\item \code{phi.est} - estimated value for the statistic of interest
\item \code{se} - standard error of the estimate
\item \code{n1j} - number of observations generated for algorithm 1
\item \code{n2j} - number of observations generated for algorithm 2
\item \code{r.opt = n1j / n2j}
\item \code{seed} - the seed used for the PRNG
\item \code{dif} - the type of difference used
}
}
\description{
Iteratively calculates the required sample sizes for two algorithms
on a given problem instance using the \strong{bootstrap} approach
(based on normality of the sampling distribution of the means)
so that the standard error
of the estimate of the difference (either simple or percent) in mean
performance is controlled at a predefined level.
}
\section{Instances and Algorithms}{

Parameters \code{instance}, \code{algorithm1} and \code{algorithm2} must each
be a list of instance (algorithm) specifications, defined according to the
instructions given below.

\code{instance} is a named list containing all relevant parameters that
define the problem instance. This list must contain at least the field
\code{instance$FUN}, with the name of the problem instance function, that is, a
routine that calculates y = f(x). If the instance requires additional
parameters, these must also be provided as named fields.

Similarly, \code{algorithm1} and \code{algorithm2} must each be a named list
containing all relevant parameters that define the algorithm to be applied
for solving the problem instance. In what follows we use \code{algorithm} to
refer to both \code{algorithm1} and \code{algorithm2}

\code{algorithm} must contain a \code{algorithm$FUN} field (the name
of the function that calls the algorithm) and any other elements/parameters
that \code{algorithm$FUN} requires (e.g., stop criteria, operator names and
parameters, etc.).

The function defined by the routine \code{algorithm$FUN} must have the
following structure: supposing that the list in \code{algorithm} has
fields \code{algorithm$FUN = myalgo} and
\code{algorithm$par1 = "a", algorithm$par2 = 5}, then:

\preformatted{
         myalgo <- function(par1, par2, instance, ...){
               # do stuff
               # ...
               return(results)
         }
   }

That is, it must be able to run if called as:

\preformatted{
         # remove '$FUN' field from list of arguments
         # and include the problem definition as field 'instance'
         myargs          <- algorithm[names(algorithm) != "FUN"]
         myargs$instance <- instance

         # call function
         do.call(algorithm$FUN,
                 args = myargs)
   }

The \code{algorithm$FUN} routine must return a list containing (at
least) the performance value of the final solution obtained, in a field named
\code{value} (e.g., \code{result$value}) after a given run.
}

\section{Initial Number of Observations}{

In the \strong{general case} the initial number of observations / algorithm /
instance (\code{nstart}) should be relatively high. For the parametric case
we recommend ~20 if outliers are not expected, ~50 (at least) if that
assumption cannot be made. For the bootstrap approch we recommend using at
least 20. However, if some distributional assumptions can be
made - particularly low skewness of the population of algorithm results on
the test instances), then \code{nstart} can in principle be as small as 5 (if the
output of the algorithm were known to be normal, it could be 1).

In general, higher sample sizes are the price to pay for abandoning
distributional assumptions. Use lower values of \code{nstart} with caution.
}

\section{Types of Differences}{

Parameter \code{dif} informs the type of difference in performance to be used
for the estimation (mu1 and mu2 represent the mean performance of each
algorithm on the problem instance):
\itemize{
\item If \code{dif == "perc"} it estimates (mu2 - mu1) / mu1.
\item If \code{dif == "simple"} it estimates mu2 - mu1.
}
}

\examples{
# Example 1: uses dummy algorithms and a dummy instance to illustrate the
# use of nreps_param
algorithm1 <- list(FUN = "dummyalgo", alias = "algo1",
                   distribution.fun = "rnorm",
                   distribution.pars = list(mean = 10, sd = 1))
algorithm2 <- list(FUN = "dummyalgo", alias = "algo2",
                   distribution.fun = "rnorm",
                   distribution.pars = list(mean = 20, sd = 4))
instance <- list(FUN = "dummyinstance")

# Theoretical n1, n2 for an SE = 0.5 on the simple difference: 20, 80
my.reps  <- nreps_boot(instance, algorithm1, algorithm2,
                        se.max = 0.5, dif = "simple", seed = 1234)
cat("n1j   =", my.reps$n1j, "\\nn2j   =", my.reps$n2j,
    "\\nphi_j =", my.reps$phi.est, "\\nse    =", my.reps$se)

# Theoretical n1, n2 for an SE = 0.05 on the percent difference: 31, 87
my.reps  <- nreps_boot(instance, algorithm1, algorithm2,
                        se.max = 0.05, dif = "perc",
                        nstart = 10, seed = 1234)
cat("n1j   =", my.reps$n1j, "\\nn2j   =", my.reps$n2j,
    "\\nphi_j =", my.reps$phi.est, "\\nse    =", my.reps$se)

}
\references{
\itemize{
\item F. Campelo, F. Takahashi:
Sample size estimation for power and accuracy in the experimental
comparison of algorithms (submitted, 2017).
\item P. Mathews.
Sample size calculations: Practical methods for engineers and scientists.
Mathews Malnar and Bailey, 2010.
\item A.C. Davison, D.V. Hinkley:
Bootstrap methods and their application. Cambridge University Press (1997)
}
}
\author{
Felipe Campelo (\email{fcampelo@ufmg.br}),
Fernanda Takahashi (\email{fernandact@ufmg.br})
}
